/*
 * JScreen.java
 *
 * Created on 15 de enero de 2008, 12:50
 */
package gui;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import machine.Spectrum;

/**
 *
 * @author  jsanchez
 */
public class JSpeccyScreen extends javax.swing.JComponent {

    private BufferedImage bImg, bScr;
    private AffineTransform escala;
    private AffineTransformOp escalaOp;
    private RenderingHints renderHints;
    private Graphics2D gcImg;
    private boolean doubleSize;
    private static final int BORDER_WIDTH = 32;
    private static final int SCREEN_WIDTH = BORDER_WIDTH + 256 + BORDER_WIDTH;
    private static final int SCREEN_HEIGHT = BORDER_WIDTH + 192 + BORDER_WIDTH;
    /** Creates new form JScreen */
    public JSpeccyScreen() {
        initComponents();

        escala = AffineTransform.getScaleInstance(2.0f, 2.0f);
        renderHints = new RenderingHints(RenderingHints.KEY_INTERPOLATION,
            RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
        renderHints.put(RenderingHints.KEY_RENDERING,
            RenderingHints.VALUE_RENDER_SPEED);
        renderHints.put(RenderingHints.KEY_ANTIALIASING,
            RenderingHints.VALUE_ANTIALIAS_OFF);
        renderHints.put(RenderingHints.KEY_COLOR_RENDERING,
            RenderingHints.VALUE_COLOR_RENDER_SPEED);
        escalaOp = new AffineTransformOp(escala, renderHints);
//        bImg = spectrum.getScreenImage();
        setMaximumSize(new java.awt.Dimension(SCREEN_WIDTH * 2, SCREEN_HEIGHT * 2));
        setMinimumSize(new java.awt.Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        setPreferredSize(new java.awt.Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
    }

    public void setScreenImage(BufferedImage fullImg, BufferedImage scrImg) {
        bImg = fullImg;
        bScr = scrImg;
        gcImg = bImg.createGraphics();
    }

    public void toggleDoubleSize() {
        doubleSize = !doubleSize;
        if (doubleSize) {
            this.setPreferredSize(new Dimension(SCREEN_WIDTH * 2, SCREEN_HEIGHT * 2));
        } else {
            this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        }
    }

    @Override
    public void paintComponent(Graphics gc) {
        //super.paintComponent(gc);
        paintScreen((Graphics2D) gc);
    }

    private void paintScreen(Graphics2D gc2) {


        //long start = System.currentTimeMillis();

        //System.out.println("Borrado: " + (System.currentTimeMillis() - start));

        // Rejilla horizontal de test
//        for( int idx = 0; idx < 36; idx ++ )
//            Arrays.fill(imgData, idx*2816, idx*2816+352, 0x404040);

        //System.out.println("Decode: " + (System.currentTimeMillis() - start));

        gcImg.drawImage(bScr, BORDER_WIDTH, BORDER_WIDTH, null);
        if (doubleSize) {
            gc2.drawImage(bImg, escalaOp, 0, 0);
        } else {
            gc2.drawImage(bImg, 0, 0, this);
        }
        //System.out.println("ms: " + (System.currentTimeMillis() - start));
        //System.out.println("");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setDoubleBuffered(false);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
