/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingsDialog.java
 *
 * Created on 03-sep-2010, 16:42:01
 */

package gui;

import configuration.*;
import java.awt.Component;
import java.awt.Frame;
import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.xml.bind.JAXB;
import javax.xml.bind.JAXBElement;

/**
 *
 * @author jsanchez
 */
public class SettingsDialog extends javax.swing.JPanel {

    private JSpeccySettingsType settings;
    private JDialog settingsDialog;

    /** Creates new form SettingsDialog */
    public SettingsDialog(JSpeccySettingsType userSettings) {
        initComponents();
        settings = userSettings;
    }

    private void updateUserSettings() {

        spectrumModel.setSelectedIndex(settings.getSpectrumSettings().getDefaultModel());

        enabledSound.setSelected(settings.getSpectrumSettings().isSoundEnabled());

        loadingNoise.setSelected(settings.getSpectrumSettings().isLoadingNoise());

        flashload.setSelected(settings.getTapeSettings().isFlashload());

        acceleratedLoad.setSelected(settings.getTapeSettings().isAccelerateLoading());

        ULAplus.setSelected(settings.getSpectrumSettings().isULAplus());

        joystick.setSelectedIndex(settings.getKeyboardJoystickSettings().getJoystickModel());

        enabledAY48k.setSelected(settings.getSpectrumSettings().isAYEnabled48K());

        speed.setValue(settings.getSpectrumSettings().getFramesInt());

        doubleSize.setSelected(settings.getSpectrumSettings().isDoubleSize());

        if (settings.getSpectrumSettings().isIssue2()) {
            issue2.setSelected(true);
        } else
            issue3.setSelected(true);

        enableSaveTraps.setSelected(settings.getTapeSettings().isEnableSaveTraps());

        if (settings.getTapeSettings().isHighSamplingFreq()) {
            highSampling.setSelected(true);
        } else {
            lowSampling.setSelected(true);
        }
    }

    public boolean showDialog(Component parent, String title) {
        Frame owner = null;
        if (parent instanceof Frame) {
            owner = (Frame) parent;
        } else {
            owner = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);
        }

        if (settingsDialog == null || settingsDialog.getOwner() != owner) {
            owner = null;
            settingsDialog = new JDialog(owner, true);
            settingsDialog.getContentPane().add(this);
            settingsDialog.pack();
        }

        updateUserSettings();
        settingsDialog.setTitle(title);
        settingsDialog.setVisible(true);
        return true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        keyboardButtonGroup = new javax.swing.ButtonGroup();
        samplingButtonGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        saveSettingsButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        hardwarePanel = new javax.swing.JPanel();
        defaultModelPanel = new javax.swing.JPanel();
        spectrumModel = new javax.swing.JComboBox();
        videoPanel = new javax.swing.JPanel();
        ULAplus = new javax.swing.JCheckBox();
        doubleSize = new javax.swing.JCheckBox();
        highSpeedPanel = new javax.swing.JPanel();
        speed = new javax.swing.JSlider();
        soundPanel = new javax.swing.JPanel();
        enabledSound = new javax.swing.JCheckBox();
        loadingNoise = new javax.swing.JCheckBox();
        enabledAY48k = new javax.swing.JCheckBox();
        tapePanel = new javax.swing.JPanel();
        loadPanel = new javax.swing.JPanel();
        flashload = new javax.swing.JCheckBox();
        acceleratedLoad = new javax.swing.JCheckBox();
        savePanel = new javax.swing.JPanel();
        enableSaveTraps = new javax.swing.JCheckBox();
        samplingPanel = new javax.swing.JPanel();
        lowSampling = new javax.swing.JRadioButton();
        highSampling = new javax.swing.JRadioButton();
        keyboardPanel = new javax.swing.JPanel();
        keyboard48kPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        issue2 = new javax.swing.JRadioButton();
        issue3 = new javax.swing.JRadioButton();
        joystickPanel = new javax.swing.JPanel();
        joystick = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        saveSettingsButton.setText(bundle.getString("SettingsDialog.saveSettingsButton.text")); // NOI18N
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveSettingsButton);

        closeButton.setText(bundle.getString("CLOSE")); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(closeButton);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        hardwarePanel.setLayout(new javax.swing.BoxLayout(hardwarePanel, javax.swing.BoxLayout.PAGE_AXIS));

        defaultModelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.defaultModePanel.border.text"))); // NOI18N

        spectrumModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Spectrum 16k", "Spectrum 48k", "Spectrum 128k", "Spectrum +2", "Spectrum +2A", "Spectrum +3" }));
        spectrumModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumModelActionPerformed(evt);
            }
        });
        defaultModelPanel.add(spectrumModel);

        hardwarePanel.add(defaultModelPanel);

        videoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Video"));

        ULAplus.setText(bundle.getString("SettingsDialog.hardwarePanel.ULAplus.text")); // NOI18N
        ULAplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ULAplusActionPerformed(evt);
            }
        });
        videoPanel.add(ULAplus);

        doubleSize.setText(bundle.getString("SettingsDialog.hardwarePanel.doubleSize.text")); // NOI18N
        doubleSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doubleSizeActionPerformed(evt);
            }
        });
        videoPanel.add(doubleSize);

        hardwarePanel.add(videoPanel);

        highSpeedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.highSpeedPanel.border.text"))); // NOI18N

        speed.setMajorTickSpacing(1);
        speed.setMaximum(10);
        speed.setMinimum(2);
        speed.setPaintLabels(true);
        speed.setPaintTicks(true);
        speed.setSnapToTicks(true);
        speed.setPreferredSize(new java.awt.Dimension(300, 43));
        speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedStateChanged(evt);
            }
        });
        highSpeedPanel.add(speed);

        hardwarePanel.add(highSpeedPanel);

        jTabbedPane1.addTab(bundle.getString("SettingsDialog.hardwarePanel.TabTitle"), hardwarePanel); // NOI18N

        soundPanel.setLayout(new javax.swing.BoxLayout(soundPanel, javax.swing.BoxLayout.PAGE_AXIS));

        enabledSound.setText(bundle.getString("SettingsDialog.soundPanel.enabledSound.text")); // NOI18N
        enabledSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledSoundActionPerformed(evt);
            }
        });
        soundPanel.add(enabledSound);

        loadingNoise.setText(bundle.getString("SettingsDialog.soundPanel.loadingNoise.text")); // NOI18N
        loadingNoise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadingNoiseActionPerformed(evt);
            }
        });
        soundPanel.add(loadingNoise);

        enabledAY48k.setText(bundle.getString("SettingsDialog.soundPanel.enabledAY48k.text")); // NOI18N
        enabledAY48k.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enabledAY48kActionPerformed(evt);
            }
        });
        soundPanel.add(enabledAY48k);

        jTabbedPane1.addTab(bundle.getString("SettingsDialog.soundPanel.TabTitle"), soundPanel); // NOI18N

        tapePanel.setLayout(new java.awt.GridLayout(2, 1));

        loadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.loadPanel.border.text"))); // NOI18N
        loadPanel.setLayout(new javax.swing.BoxLayout(loadPanel, javax.swing.BoxLayout.PAGE_AXIS));

        flashload.setText(bundle.getString("SettingsDialog.tapePanel.flashload.text")); // NOI18N
        flashload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flashloadActionPerformed(evt);
            }
        });
        loadPanel.add(flashload);

        acceleratedLoad.setText(bundle.getString("SettingsDialog.tapePanel.acceleratedLoad.text")); // NOI18N
        acceleratedLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceleratedLoadActionPerformed(evt);
            }
        });
        loadPanel.add(acceleratedLoad);

        tapePanel.add(loadPanel);

        savePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.savePanel.border.text"))); // NOI18N
        savePanel.setLayout(new javax.swing.BoxLayout(savePanel, javax.swing.BoxLayout.LINE_AXIS));

        enableSaveTraps.setSelected(true);
        enableSaveTraps.setText(bundle.getString("SettingsDialog.savePanel.enableSaveTraps.text")); // NOI18N
        enableSaveTraps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableSaveTrapsActionPerformed(evt);
            }
        });
        savePanel.add(enableSaveTraps);

        samplingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.highSamplingFreq.border.text"))); // NOI18N
        samplingPanel.setLayout(new javax.swing.BoxLayout(samplingPanel, javax.swing.BoxLayout.PAGE_AXIS));

        samplingButtonGroup.add(lowSampling);
        lowSampling.setSelected(true);
        lowSampling.setText("22050 Hz");
        lowSampling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowSamplingActionPerformed(evt);
            }
        });
        samplingPanel.add(lowSampling);

        samplingButtonGroup.add(highSampling);
        highSampling.setText("44100 Hz");
        highSampling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highSamplingActionPerformed(evt);
            }
        });
        samplingPanel.add(highSampling);

        savePanel.add(samplingPanel);

        tapePanel.add(savePanel);

        jTabbedPane1.addTab(bundle.getString("SettingsDialog.tapePanel.TabTitle"), tapePanel); // NOI18N

        keyboardPanel.setLayout(new javax.swing.BoxLayout(keyboardPanel, javax.swing.BoxLayout.PAGE_AXIS));

        keyboard48kPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.keyboard48kPanel.title.text"))); // NOI18N
        keyboard48kPanel.setLayout(new javax.swing.BoxLayout(keyboard48kPanel, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText(bundle.getString("SettingsDialog.jlabel1.text")); // NOI18N
        jPanel3.add(jLabel1);

        keyboard48kPanel.add(jPanel3);

        keyboardButtonGroup.add(issue2);
        issue2.setText(bundle.getString("SettingsDialog.issue2RadioButton.text")); // NOI18N
        issue2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issue2ActionPerformed(evt);
            }
        });
        jPanel2.add(issue2);

        keyboardButtonGroup.add(issue3);
        issue3.setSelected(true);
        issue3.setText(bundle.getString("SettingsDialog.issue3RadioButton.text")); // NOI18N
        issue3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issue2ActionPerformed(evt);
            }
        });
        jPanel2.add(issue3);

        keyboard48kPanel.add(jPanel2);

        keyboardPanel.add(keyboard48kPanel);

        joystickPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("SettingsDialog.joystickPanel.border.text"))); // NOI18N

        joystick.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Kempston", "Sinclair 1", "Sinclair 2", "Cursor/AGF/Protek" }));
        joystick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joystickActionPerformed(evt);
            }
        });
        joystickPanel.add(joystick);

        keyboardPanel.add(joystickPanel);

        jTabbedPane1.addTab(bundle.getString("SettingsDialog.keyboardPanel.TabTitle"), keyboardPanel); // NOI18N

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        settingsDialog.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void spectrumModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumModelActionPerformed
        settings.getSpectrumSettings().setDefaultModel(spectrumModel.getSelectedIndex());
    }//GEN-LAST:event_spectrumModelActionPerformed

    private void ULAplusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ULAplusActionPerformed
        settings.getSpectrumSettings().setULAplus(ULAplus.isSelected());
    }//GEN-LAST:event_ULAplusActionPerformed

    private void speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedStateChanged
        settings.getSpectrumSettings().setFramesInt(speed.getValue());
    }//GEN-LAST:event_speedStateChanged

    private void issue2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issue2ActionPerformed
        settings.getSpectrumSettings().setIssue2(issue2.isSelected());
    }//GEN-LAST:event_issue2ActionPerformed

    private void joystickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joystickActionPerformed
        settings.getKeyboardJoystickSettings().setJoystickModel(joystick.getSelectedIndex());
    }//GEN-LAST:event_joystickActionPerformed

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
         ResourceBundle bundle = ResourceBundle.getBundle("gui/Bundle"); // NOI18N
        int ret = JOptionPane.showConfirmDialog(this,
                  bundle.getString("ARE_YOU_SURE_QUESTION"), bundle.getString("SAVE_SETTINGS_QUESTION"),
                  JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE); // NOI18N

        if (ret == JOptionPane.NO_OPTION)
            return;

        try {
            BufferedOutputStream fOut =
                new BufferedOutputStream(new FileOutputStream("JSpeccy.xml"));
            // create an element for marshalling
            JAXBElement<JSpeccySettingsType> confElement =
                (new ObjectFactory()).createJSpeccySettings(settings);

            // create a Marshaller and marshal to conf. file
            JAXB.marshal(confElement, fOut);
            try {
                fOut.close();
            } catch (IOException ex) {
                Logger.getLogger(SettingsDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SettingsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    private void enabledSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledSoundActionPerformed
        settings.getSpectrumSettings().setSoundEnabled(enabledSound.isSelected());
    }//GEN-LAST:event_enabledSoundActionPerformed

    private void loadingNoiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadingNoiseActionPerformed
        settings.getSpectrumSettings().setLoadingNoise(loadingNoise.isSelected());
    }//GEN-LAST:event_loadingNoiseActionPerformed

    private void enabledAY48kActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enabledAY48kActionPerformed
        settings.getSpectrumSettings().setAYEnabled48K(enabledAY48k.isSelected());
    }//GEN-LAST:event_enabledAY48kActionPerformed

    private void flashloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flashloadActionPerformed
        settings.getTapeSettings().setFlashload(flashload.isSelected());
    }//GEN-LAST:event_flashloadActionPerformed

    private void acceleratedLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceleratedLoadActionPerformed
        settings.getTapeSettings().setAccelerateLoading(acceleratedLoad.isSelected());
    }//GEN-LAST:event_acceleratedLoadActionPerformed

    private void doubleSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doubleSizeActionPerformed
        settings.getSpectrumSettings().setDoubleSize(doubleSize.isSelected());
    }//GEN-LAST:event_doubleSizeActionPerformed

    private void enableSaveTrapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableSaveTrapsActionPerformed
        settings.getTapeSettings().setEnableSaveTraps(enableSaveTraps.isSelected());
    }//GEN-LAST:event_enableSaveTrapsActionPerformed

    private void lowSamplingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowSamplingActionPerformed
        settings.getTapeSettings().setHighSamplingFreq(false);
    }//GEN-LAST:event_lowSamplingActionPerformed

    private void highSamplingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highSamplingActionPerformed
        settings.getTapeSettings().setHighSamplingFreq(true);
    }//GEN-LAST:event_highSamplingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ULAplus;
    private javax.swing.JCheckBox acceleratedLoad;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel defaultModelPanel;
    private javax.swing.JCheckBox doubleSize;
    private javax.swing.JCheckBox enableSaveTraps;
    private javax.swing.JCheckBox enabledAY48k;
    private javax.swing.JCheckBox enabledSound;
    private javax.swing.JCheckBox flashload;
    private javax.swing.JPanel hardwarePanel;
    private javax.swing.JRadioButton highSampling;
    private javax.swing.JPanel highSpeedPanel;
    private javax.swing.JRadioButton issue2;
    private javax.swing.JRadioButton issue3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox joystick;
    private javax.swing.JPanel joystickPanel;
    private javax.swing.JPanel keyboard48kPanel;
    private javax.swing.ButtonGroup keyboardButtonGroup;
    private javax.swing.JPanel keyboardPanel;
    private javax.swing.JPanel loadPanel;
    private javax.swing.JCheckBox loadingNoise;
    private javax.swing.JRadioButton lowSampling;
    private javax.swing.ButtonGroup samplingButtonGroup;
    private javax.swing.JPanel samplingPanel;
    private javax.swing.JPanel savePanel;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JPanel soundPanel;
    private javax.swing.JComboBox spectrumModel;
    private javax.swing.JSlider speed;
    private javax.swing.JPanel tapePanel;
    private javax.swing.JPanel videoPanel;
    // End of variables declaration//GEN-END:variables

}
